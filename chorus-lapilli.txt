Getting the test program to work:
trying to get given tests to work
    ./helper test headless
        > test_chorus_lapilli.py: error: unrecognized arguments: headless
    ./helper test
        > [Error] No module named 'selenium' 
    ./helper test-docker
        > test_chorus_lapilli.py: error: unrecognized arguments: headless

trying to find selenium
    ./venv/bin/python3 -m pip freeze | grep 'selenium'
        > No module named pip

installing pip
    first I installed it in my Ubuntu instance
        > not found in my VM

Asked an LLM how to get pip on my VM
    curl -sS https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    ./venv/bin/python3 get-pip.py
        > Successfully installed pip-25.2

trying to fix selenium again
    ./venv/bin/python3 -m pip freeze | grep 'selenium'
        > exit code 1

installing selenium
    ./venv/bin/python3 -m pip install selenium
        > success

running test
    ./helper test
        > opens the port similarly to ./helper dev
    
In the end I met with a TA, ultimately we were unable to fix the underlying issue but we made a few modifications to test_chorus_lapilli so that it could run headlessly on the seasnet server

Building Chorus Lapilli:
start with the code from tictactoe tutorial
added a state which keeps track of the turn number
refactored "isXNext" to use turnNo instead
prevent player from placing new tiles after turnNo 6 using a check in handleclick
    > this check will later be used to implement moving functionality
added a movingMode state, when a player clicks on a square after they make 6 moves they enter movingMode
    > moved regular tictactoe code into a check for movingMode
    > added checks to ensure the player is clicking on a filled or unfilled square when they should be
added a movingSquare state which keeps track of the square a player clicks before entering movingMode 
    > log the square for testing purposes
added a function to check if the second square clicked on is valid
    > originally I was going to perform the check using a switch statement however that quickly got verbose and I figured there was a better way to perform this check
    > I asked an LLM "is there a more elegant way to write {the switch statement} (language react)"
        > it recommended creating an array of pairs and and using the .includes(x) function
        > in its solution it used two operator I was previously unfamiliar with
            > the .? operator attempts to run a function if and only if the corresponding object is defined
            > the ?? operator returns the second object if the first is not defined
added a check to ensure the player is only initiating a swap on their tiles
integrated nextSquares with swapping logic
ensure nextSquares contains a winning condition if the center square is controlled